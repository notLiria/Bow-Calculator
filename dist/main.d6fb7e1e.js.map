{"version":3,"sources":["src/calculations.ts","src/main.ts"],"names":[],"mappings":";AA0BA,aA1BA,SAAgB,EAAa,EAAoB,EAAgB,GACvD,OAAA,EAAa,EAAe,EAAS,EAAU,EAAO,EAAe,EAAgB,EAAM,EAGrG,SAAgB,EAAU,EAAoB,EAAgB,GAUrD,IAPD,IAAA,EAAK,EACL,EAAI,EACJ,EAAI,EAEN,EAAI,EACJ,EAAY,EAAW,EAAI,EAAG,EAAG,GAE9B,KAAK,IAAI,GAJK,KAMnB,EAAY,EAAW,EAAI,EAAG,EAD9B,GALmB,KAQd,OAAA,EAGT,SAAgB,EAAW,EAAY,EAAW,EAAW,GAEnD,OAAA,KAAA,IAAA,EAAK,GAAM,KAAA,IAAC,EAAI,EAAO,GAAK,EAAI,GAAK,EAAI,GAAM,KAAK,IAAI,GAAK,EAAI,IAAO,KAAA,IAAC,EAAI,EAAM,GAG7F,SAAgB,EAAO,EAAW,GACzB,OAAA,EAAI,KAAK,KAAM,KAAA,IAAA,EAAK,GAAM,KAAA,IAAA,EAAK,IADxC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA1BA,QAAA,aAAA,EAIA,QAAA,UAAA,EAiBA,QAAA,WAAA,EAKA,QAAA,OAAA;;ACAC,aAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA1BD,IAAA,EAAA,EAAA,QAAA,mBAGI,EAAM,SAAS,eAAe,QAGlC,SAAS,IAED,IAAA,EAAI,WAAY,SAAS,eAAe,UAA+B,OACvE,EAAI,WAAY,SAAS,eAAe,iBAAsC,OAC9E,EAAK,WAAY,SAAS,eAAe,eAAoC,OAC7E,EAAI,WAAY,SAAS,eAAe,mBAAwC,OAKlF,IAAU,IADA,EAAa,aAAa,EAAI,EAAG,GAE7C,SAAS,eAAe,SAAS,UAAY,sDAE3C,CACF,SAAS,eAAe,SAAS,UAAY,GACvC,IAAA,EAAO,EAAa,UAAU,EAAI,EAAG,GACrC,EAAI,EAAa,OAAO,EAAM,GACpC,SAAS,eAAe,UAAU,UAAY,eAAiB,EAAK,WACpE,SAAS,eAAe,KAAK,UAAY,eAAiB,EAAE,YApBhE,EAAI,iBAAiB,QAAS","file":"main.d6fb7e1e.js","sourceRoot":"..","sourcesContent":["export function check_values(drawLength: number, length: number, stringLength: number): boolean {\r\n  return (drawLength * drawLength + ((length * length) / 4) - ((stringLength * stringLength) / 4)) > 0;\r\n}\r\n\r\nexport function find_root(drawLength: number, length: number, stringLength: number) {\r\n  // Rename variables to the way they appear in the equation\r\n  // Return the value of r that is reasonably close to being a root\r\n  const DL = drawLength;\r\n  const S = stringLength;\r\n  const L = length;\r\n  const allowableErr = 0.01;\r\n  let r = DL;\r\n  let currValue = calc_value(DL, S, L, r);\r\n\r\n  while (Math.abs(currValue) > allowableErr) {\r\n    r = r + allowableErr;\r\n    currValue = calc_value(DL, S, L, r);\r\n  }\r\n  return r;\r\n}\r\n\r\nexport function calc_value(dl: number, s: number, l: number, r: number) {\r\n  // Returns the value of this function\r\n  return (r ** 2) + ((r - dl) ** 2) - 2 * r * (r - dl) * Math.cos(l / (2 * r)) - ((s / 2) ** 2);\r\n}\r\n\r\nexport function calc_p(r: number, t: number){\r\n  return r - Math.sqrt((r ** 2) - (t ** 2))\r\n}\r\n\r\n\r\n","import * as Calculations from \"./calculations\"\r\n\r\n\r\nlet btn = document.getElementById(\"calc\");\r\nbtn.addEventListener(\"click\", calc_radius);\r\n\r\nfunction calc_radius() {\r\n\r\n  const L = parseFloat((document.getElementById(\"length\") as HTMLInputElement).value);\r\n  const S = parseFloat((document.getElementById(\"string-length\") as HTMLInputElement).value);\r\n  const DL = parseFloat((document.getElementById(\"draw-length\") as HTMLInputElement).value);\r\n  const t = parseFloat((document.getElementById(\"tillering-gizmo\") as HTMLInputElement).value);\r\n\r\n\r\n  // Check if the values make sense\r\n  const valid = Calculations.check_values(DL, L, S);\r\n  if (valid === false) {\r\n    document.getElementById(\"error\").innerText = \"ERROR YOU HAVE AN INVALID COMBINATION OF VALUES\";\r\n  }\r\n  else{\r\n    document.getElementById(\"error\").innerText = \"\";\r\n    const root = Calculations.find_root(DL, L, S);\r\n    const p = Calculations.calc_p(root, t)\r\n    document.getElementById(\"radius\").innerText = \"R (in cm) : \" + root.toString();\r\n    document.getElementById(\"p\").innerText = \"P (in cm) : \" + p.toString();\r\n  }\r\n}\r\n"]}